// @generated by protobuf-ts 2.8.2 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "parca/scrape/v1alpha1/scrape.proto" (package "parca.scrape.v1alpha1", syntax proto3)
// tslint:disable
import {
  stackIntercept,
  type RpcOptions,
  type RpcTransport,
  type ServiceInfo,
  type UnaryCall,
} from '@protobuf-ts/runtime-rpc';

import {ScrapeService, type TargetsRequest, type TargetsResponse} from './scrape';

/**
 * ScrapeService maintains the set of scrape targets
 *
 * @generated from protobuf service parca.scrape.v1alpha1.ScrapeService
 */
export interface IScrapeServiceClient {
  /**
   * Targets returns the set of scrape targets that are configured
   *
   * @generated from protobuf rpc: Targets(parca.scrape.v1alpha1.TargetsRequest) returns (parca.scrape.v1alpha1.TargetsResponse);
   */
  targets(input: TargetsRequest, options?: RpcOptions): UnaryCall<TargetsRequest, TargetsResponse>;
}
/**
 * ScrapeService maintains the set of scrape targets
 *
 * @generated from protobuf service parca.scrape.v1alpha1.ScrapeService
 */
export class ScrapeServiceClient implements IScrapeServiceClient, ServiceInfo {
  typeName = ScrapeService.typeName;
  methods = ScrapeService.methods;
  options = ScrapeService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Targets returns the set of scrape targets that are configured
   *
   * @generated from protobuf rpc: Targets(parca.scrape.v1alpha1.TargetsRequest) returns (parca.scrape.v1alpha1.TargetsResponse);
   */
  targets(input: TargetsRequest, options?: RpcOptions): UnaryCall<TargetsRequest, TargetsResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<TargetsRequest, TargetsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
}
